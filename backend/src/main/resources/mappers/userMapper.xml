<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.honeystone.user.model.dao.UserDao">
	
	<!-- 회원가입 -->
	<insert id="createUser" parameterType="com.honeystone.common.dto.user.UserSignupRequest">
        INSERT INTO users (email, nickname, password, created_at)
        VALUES (#{email}, #{nickname}, #{password}, NOW())
    </insert>
    
    <!-- 닉네임 중복 확인용 -->
    <select id="countByNickname" parameterType="string" resultType="int">
        SELECT COUNT(*) 
        FROM users 
        WHERE nickname = #{nickname}
		AND deleted_at IS NULL
    </select>
    
    <!-- 이메일 중복 확인용 -->
    <select id="countByEmail" parameterType="string" resultType="int">
	    SELECT COUNT(*) 
	    FROM users 
	    WHERE email = #{email}
		AND deleted_at IS NULL
	</select>
	
    <!-- 토큰 발급용 이메일로 유저 찾기 -->
    <select id="findByEmail" parameterType="string" resultType="com.honeystone.common.dto.user.User">
        SELECT *
        FROM users
        WHERE email = #{email}
		AND deleted_at IS NULL
    </select>
    
    <!-- 닉네임으로 GetUser 가져오기 -->
    <select id="getUserByNickname" resultType="GetUser">
	    SELECT 
	    	u.*,
			EXISTS (
	            SELECT 1 
	            FROM follows f
	            WHERE f.follower_id = #{userId}
	              AND f.followee_id = u.id
	        	) AS isFollowing 
	    FROM users u
	    WHERE u.nickname = #{nickname}
		AND u.deleted_at IS NULL
	</select>
    
    <!-- 닉네임으로 유저 검색 -->
    <select id="searchByNickname" parameterType="map" resultType="GetUser">
	    SELECT 
	    	u.*,
			EXISTS (
	            SELECT 1 
	            FROM follows f
	            WHERE f.follower_id = #{requestUserId}
	              AND f.followee_id = u.id
	        	) AS isFollowing 
	    FROM users u 
	    <where>
	        <if test="nickname != null and nickname != ''">
	            u.nickname LIKE CONCAT('%', #{nickname}, '%')
	        </if>
			AND u.deleted_at IS NULL
	    </where>
	    LIMIT #{size} OFFSET #{offset}
	</select>
	
	<!-- 닉네임 조회 카운팅 -->
	<select id="countSearchByNickname" parameterType="string" resultType="long">
	    SELECT COUNT(*)
	    FROM users u
	    <where>
	        <if test="nickname != null and nickname != ''">
	            u.nickname LIKE CONCAT('%', #{nickname}, '%')
	        </if>
	        AND u.deleted_at IS NULL
	    </where>
	</select>

    <select id="existsById" parameterType="Long" resultType="int">
        SELECT COUNT(*)
        FROM users
        WHERE id = #{userId}
		AND deleted_at IS NULL
    </select>

	<insert id="createUserFile" parameterType="UserFile">
		INSERT INTO user_files (user_id, url, filename)
		VALUES (#{userId}, #{url}, #{filename})
	</insert>

	<update id="updateProfileImage">
		UPDATE users
		SET img = #{img},
		updated_at = NOW()
		WHERE id = #{userId}
	</update>

	<select id="findUserFileByUserId" resultType="UserFile">
		SELECT * FROM user_files WHERE user_id = #{userId}
	</select>

	<delete id="deleteUserFileByUserId">
		DELETE FROM user_files WHERE user_id = #{userId}
	</delete>

	<select id="findNicknameByUserId" resultType="String">
		SELECT nickname FROM users WHERE id = #{userId} AND deleted_at IS NULL
	</select>

	<update id="updateNicknameAndDescription">
		UPDATE users
		SET nickname = #{nickname},
		description = #{description},
		updated_at = NOW()
		WHERE id = #{userId}
		AND deleted_at IS NULL
	</update>

	<update id="deleteUser">
		UPDATE users
		SET deleted_at = NOW()
		WHERE id = #{userId}
	</update>

	<update id="updatePassword">
		UPDATE users
		SET password = #{newPassword}, updated_at = NOW()
		WHERE id = #{userId}
		AND deleted_at IS NULL
	</update>

	<!-- 작성한 게시글 수 -->
	<select id="countBoards" parameterType="long" resultType="long">
		SELECT COUNT(*)
		FROM boards b
		WHERE b.user_id = #{userId}
	</select>

	<!-- 작성한 게시글 목록 -->
	<select id="getBoardList" parameterType="map" resultType="GetBoard">
		SELECT
		b.id AS id,
		b.title,
		b.description,
		b.level,
		b.skill,
		f.url,
		c.*,
				EXISTS (
		SELECT 1
		FROM favorites fav
		WHERE fav.user_id = #{userId}
		AND fav.board_id = b.id
		) AS liked,
		(SELECT COUNT(*) FROM reviews r WHERE r.board_id = b.id) AS reviewCount,
		(SELECT COUNT(*) FROM favorites fav2 WHERE fav2.board_id = b.id) AS favoriteCount

		FROM boards b

		LEFT JOIN files f ON b.id = f.board_id
		LEFT JOIN the_climb_board cb ON b.id = cb.board_id
		LEFT JOIN the_climb c ON cb.the_climb_id = c.id

		WHERE b.user_id = #{userId}
		ORDER BY b.id DESC
		LIMIT #{size} OFFSET #{offset}
	</select>

</mapper>